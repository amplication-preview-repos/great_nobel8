/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GameLevel } from "./GameLevel";
import { GameLevelCountArgs } from "./GameLevelCountArgs";
import { GameLevelFindManyArgs } from "./GameLevelFindManyArgs";
import { GameLevelFindUniqueArgs } from "./GameLevelFindUniqueArgs";
import { CreateGameLevelArgs } from "./CreateGameLevelArgs";
import { UpdateGameLevelArgs } from "./UpdateGameLevelArgs";
import { DeleteGameLevelArgs } from "./DeleteGameLevelArgs";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { GameLevelService } from "../gameLevel.service";
@graphql.Resolver(() => GameLevel)
export class GameLevelResolverBase {
  constructor(protected readonly service: GameLevelService) {}

  async _gameLevelsMeta(
    @graphql.Args() args: GameLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GameLevel])
  async gameLevels(
    @graphql.Args() args: GameLevelFindManyArgs
  ): Promise<GameLevel[]> {
    return this.service.gameLevels(args);
  }

  @graphql.Query(() => GameLevel, { nullable: true })
  async gameLevel(
    @graphql.Args() args: GameLevelFindUniqueArgs
  ): Promise<GameLevel | null> {
    const result = await this.service.gameLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameLevel)
  async createGameLevel(
    @graphql.Args() args: CreateGameLevelArgs
  ): Promise<GameLevel> {
    return await this.service.createGameLevel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GameLevel)
  async updateGameLevel(
    @graphql.Args() args: UpdateGameLevelArgs
  ): Promise<GameLevel | null> {
    try {
      return await this.service.updateGameLevel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameLevel)
  async deleteGameLevel(
    @graphql.Args() args: DeleteGameLevelArgs
  ): Promise<GameLevel | null> {
    try {
      return await this.service.deleteGameLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Question], { name: "questions" })
  async findQuestions(
    @graphql.Parent() parent: GameLevel,
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
