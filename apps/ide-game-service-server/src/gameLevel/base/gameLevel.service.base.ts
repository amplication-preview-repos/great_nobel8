/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GameLevel as PrismaGameLevel,
  Question as PrismaQuestion,
} from "@prisma/client";

export class GameLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameLevel.count(args);
  }

  async gameLevels<T extends Prisma.GameLevelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameLevelFindManyArgs>
  ): Promise<PrismaGameLevel[]> {
    return this.prisma.gameLevel.findMany<Prisma.GameLevelFindManyArgs>(args);
  }
  async gameLevel<T extends Prisma.GameLevelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameLevelFindUniqueArgs>
  ): Promise<PrismaGameLevel | null> {
    return this.prisma.gameLevel.findUnique(args);
  }
  async createGameLevel<T extends Prisma.GameLevelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameLevelCreateArgs>
  ): Promise<PrismaGameLevel> {
    return this.prisma.gameLevel.create<T>(args);
  }
  async updateGameLevel<T extends Prisma.GameLevelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameLevelUpdateArgs>
  ): Promise<PrismaGameLevel> {
    return this.prisma.gameLevel.update<T>(args);
  }
  async deleteGameLevel<T extends Prisma.GameLevelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameLevelDeleteArgs>
  ): Promise<PrismaGameLevel> {
    return this.prisma.gameLevel.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<PrismaQuestion[]> {
    return this.prisma.gameLevel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questions(args);
  }
}
